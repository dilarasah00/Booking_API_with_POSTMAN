{
	"info": {
		"_postman_id": "666bff38-2d1c-4ce9-8548-b320fc5b8f5d",
		"name": "Negative_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35340791"
	},
	"item": [
		{
			"name": "Get booking",
			"item": [
				{
					"name": "Get booking by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Staus code is expected\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(pm.iterationData.get(\"expected_status\"));\r",
									"})\r",
									"\r",
									"pm.test(\"Response message includes 'Not Found'\",() =>{\r",
									"    pm.expect(pm.response.text()).to.include('Not Found');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}booking/{{id}}",
							"host": [
								"{{url}}booking"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create token",
			"item": [
				{
					"name": "Create token by invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Invalid credentials\", ()=>{\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.oneOf([undefined, null, \"\"]);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth",
							"host": [
								"{{url}}auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update booking",
			"item": [
				{
					"name": "Create a booking for negative test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"bookingId\", jsonData.bookingid, \"initial\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}booking",
							"host": [
								"{{url}}booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create token for negative test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"token\", jsonData.token, \"initial\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}auth",
							"host": [
								"{{url}}auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update booking by invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status coode is 403\", ()=>{\r",
									"    pm.expect(pm.response.code).to.eql(403)\r",
									"})\r",
									"pm.test(\"Response message includes 'Forbidden'\",() =>{\r",
									"    pm.expect(pm.response.text()).to.include('Forbidden');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token=123456789",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 123,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}booking/{{bookingId}}",
							"host": [
								"{{url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update booking with missing field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status coode is 400\", ()=>{\r",
									"    pm.expect(pm.response.code).to.eql(400)\r",
									"})\r",
									"pm.test(\"Response message includes 'Bad Request'\",() =>{\r",
									"    pm.expect(pm.response.text()).to.include('Bad Request');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 123,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}booking/{{bookingId}}",
							"host": [
								"{{url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Booking",
			"item": [
				{
					"name": "Create a booking for negative delete test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"bookingId\", jsonData.bookingid, \"initial\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Kevin\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}booking",
							"host": [
								"{{url}}booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status coode is 403\", ()=>{\r",
									"    pm.expect(pm.response.code).to.eql(403)\r",
									"})\r",
									"pm.test(\"Response message includes 'Forbidden'\",() =>{\r",
									"    pm.expect(pm.response.text()).to.include('Forbidden');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}booking/{{bookingId}}",
							"host": [
								"{{url}}booking"
							],
							"path": [
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}